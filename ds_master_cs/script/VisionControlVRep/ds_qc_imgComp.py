# -*- coding: utf-8 -*-
"""image_comparison_final.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1wtKjJVg4y6-EdXVVqvyiNDh2b1uyFpT3
    Author: M. Nihar
"""

import matplotlib.pyplot as plt
import numpy as np
import cv2
from skimage import measure
#from google.colab import files

import os

dirname = os.path.dirname(__file__)
savedfolderName = "ds_img_qc"
picfolder = os.path.join(dirname, savedfolderName)

def mse(imageA, imageB):
	# NOTE: the two images must have the same dimension
	err = np.sum((imageA.astype("float") - imageB.astype("float")) ** 2)
	err /= float(imageA.shape[0] * imageA.shape[1])
	return err

def ssim_compare(imageA, imageB):
    s = measure.compare_ssim(imageA, imageB)
    return s

def compare_images(imageA, imageB, title):
  s = ssim_compare(imageA, imageB)
  m = mse(imageA, imageB)
  fig = plt.figure(title)
  plt.suptitle("MSE: %.2f, SSIM: %.2f" % (m, s))
  ax = fig.add_subplot(1, 2, 1)
  plt.imshow(imageA, cmap = plt.cm.gray)
  ax = fig.add_subplot(1, 2, 2)
  plt.imshow(imageB, cmap = plt.cm.gray)
  plt.axis("off")
  plt.show()
  return s,m

def img_compare_main():
	#uploaded = files.upload()
	fileNameO1 = 'vsQC_1.jpg'
	fileNameO2 = 'vsQC_2.jpg'
	fileNameC1 = 'vsQC_2.jpg'
	fileNameC2 = 'vsQC_2.jpg'
	completePathO1 = os.path.join(picfolder, fileNameO1)
	completePathO2 = os.path.join(picfolder, fileNameO2)
	completePathC1 = os.path.join(picfolder, fileNameC1)
	completePathC2 = os.path.join(picfolder, fileNameC2)
	original1 = cv2.imread(completePathO1)
	original2 = cv2.imread(completePathO2)
	captured1 = cv2.imread(completePathC1)
	captured2 = cv2.imread(completePathC2)

	# convert the images to grayscale
	original1 = cv2.cvtColor(original1, cv2.COLOR_BGR2GRAY)
	original2 = cv2.cvtColor(original2, cv2.COLOR_BGR2GRAY)
	captured1 = cv2.cvtColor(captured1, cv2.COLOR_BGR2GRAY)
	captured2 = cv2.cvtColor(captured2, cv2.COLOR_BGR2GRAY)

	# initialize the figure
	fig = plt.figure("Images")
	images = ("original1", original1), ("captured1", captured1), ("original2", original2), ("captured2", captured2)
	# loop over the images
	for (i, (name, image)) in enumerate(images):
		# show the image
		ax = fig.add_subplot(2, 2, i + 1)
		ax.set_title(name)
		plt.imshow(image, cmap = plt.cm.gray)
		plt.axis("off")
	# show the figure
	plt.show()
	# compare the images
	[s,m] = compare_images(original1, captured1, "Original1 vs. Captured1")
	[s1,m1]= compare_images(original2, captured2, "Original2 vs. Captured2")

	if (m<50.0) & (m1<50.0):
	  print ("Image Matched")
	else:
	  print ("Print Error")

if __name__ == "__main__":
	img_compare_main()

